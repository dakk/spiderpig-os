<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
<title>SpiderPig: src/kernel/arch/x86/dt.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.5.8 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.html"><span>File&nbsp;List</span></a></li>
      <li><a href="globals.html"><span>File&nbsp;Members</span></a></li>
    </ul>
  </div>
<h1>src/kernel/arch/x86/dt.h</h1><a href="dt_8h.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00006"></a>00006 <span class="preprocessor">#ifndef DT_H</span>
<a name="l00007"></a>00007 <span class="preprocessor"></span><span class="preprocessor">#define DT_H</span>
<a name="l00008"></a>00008 <span class="preprocessor"></span>
<a name="l00009"></a>00009 <span class="preprocessor">#include &lt;<a class="code" href="types_8h.html">types.h</a>&gt;</span>
<a name="l00010"></a>00010 
<a name="l00011"></a>00011 
<a name="l00015"></a><a class="code" href="structidt__entry.html">00015</a> <span class="keyword">struct </span><a class="code" href="structidt__entry.html">idt_entry</a>
<a name="l00016"></a>00016 {
<a name="l00017"></a>00017     <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> base_lo;
<a name="l00018"></a>00018     <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> sel;        <span class="comment">/* Our kernel segment goes here! */</span>
<a name="l00019"></a>00019     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> always0;     <span class="comment">/* This will ALWAYS be set to 0! */</span>
<a name="l00020"></a>00020     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> flags;       <span class="comment">/* Set using the above table! */</span>
<a name="l00021"></a>00021     <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> base_hi;
<a name="l00022"></a>00022 } <a class="code" href="struct____attribute____.html">__attribute__</a>((<a class="code" href="dt_8h.html#6f64eb0a284be3fef6d8916fd7ef7a9e">packed</a>));
<a name="l00023"></a>00023 
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 
<a name="l00029"></a><a class="code" href="structidt__ptr.html">00029</a> <span class="keyword">struct </span><a class="code" href="structidt__ptr.html">idt_ptr</a>
<a name="l00030"></a>00030 {
<a name="l00031"></a>00031     <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> limit;
<a name="l00032"></a>00032     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> base;
<a name="l00033"></a>00033 } <a class="code" href="struct____attribute____.html">__attribute__</a>((<a class="code" href="dt_8h.html#6f64eb0a284be3fef6d8916fd7ef7a9e">packed</a>));
<a name="l00034"></a>00034 
<a name="l00035"></a>00035 <span class="comment">/* Declare an IDT of 256 entries. Although we will only use the</span>
<a name="l00036"></a>00036 <span class="comment">*  first 32 entries in this tutorial, the rest exists as a bit</span>
<a name="l00037"></a>00037 <span class="comment">*  of a trap. If any undefined IDT entry is hit, it normally</span>
<a name="l00038"></a>00038 <span class="comment">*  will cause an "Unhandled Interrupt" exception. Any descriptor</span>
<a name="l00039"></a>00039 <span class="comment">*  for which the 'presence' bit is cleared (0) will generate an</span>
<a name="l00040"></a>00040 <span class="comment">*  "Unhandled Interrupt" exception */</span>
<a name="l00041"></a>00041 <span class="keyword">struct </span><a class="code" href="structidt__entry.html">idt_entry</a> idt[256];
<a name="l00042"></a>00042 <span class="keyword">struct </span><a class="code" href="structidt__ptr.html">idt_ptr</a> idtp;
<a name="l00043"></a>00043 
<a name="l00044"></a>00044 <span class="comment">/* This exists in 'start.asm', and is used to load our IDT */</span>
<a name="l00045"></a>00045 <span class="keyword">extern</span> <span class="keywordtype">void</span> idt_load();
<a name="l00046"></a>00046 
<a name="l00047"></a>00047 
<a name="l00048"></a>00048 <span class="keywordtype">void</span> idt_set_gate(<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>, <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>, <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span>, <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>);
<a name="l00049"></a>00049 <span class="keywordtype">void</span> idt_install();
<a name="l00050"></a>00050 <span class="keywordtype">void</span> isrs_install();
<a name="l00051"></a>00051 <span class="keywordtype">void</span> <a class="code" href="dt_8c.html#8f3b35a03cd472f80170761be06eea64">fault_handler</a>(regs_t *);
<a name="l00052"></a>00052 
<a name="l00053"></a>00053 
<a name="l00054"></a>00054 
<a name="l00055"></a>00055 
<a name="l00056"></a>00056 
<a name="l00060"></a><a class="code" href="structgdt__entry.html">00060</a> <span class="keyword">struct </span><a class="code" href="structgdt__entry.html">gdt_entry</a>
<a name="l00061"></a>00061 {
<a name="l00062"></a>00062         <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> limit_low;
<a name="l00063"></a>00063         <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> base_low;
<a name="l00064"></a>00064         <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> base_middle;
<a name="l00065"></a>00065         <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> access;
<a name="l00066"></a>00066         <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> granularity;
<a name="l00067"></a>00067         <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> base_high;
<a name="l00068"></a>00068 } <a class="code" href="struct____attribute____.html">__attribute__</a>((<a class="code" href="dt_8h.html#6f64eb0a284be3fef6d8916fd7ef7a9e">packed</a>));
<a name="l00069"></a>00069  
<a name="l00070"></a>00070  
<a name="l00071"></a>00071 
<a name="l00075"></a><a class="code" href="structgdt__ptr.html">00075</a> <span class="keyword">struct </span><a class="code" href="structgdt__ptr.html">gdt_ptr</a>
<a name="l00076"></a>00076 {
<a name="l00077"></a>00077         <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> limit;
<a name="l00078"></a>00078         <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> base;
<a name="l00079"></a>00079 } <a class="code" href="struct____attribute____.html">__attribute__</a>((<a class="code" href="dt_8h.html#6f64eb0a284be3fef6d8916fd7ef7a9e">packed</a>));
<a name="l00080"></a>00080  
<a name="l00081"></a>00081 <span class="comment">// We'll need at least 3 entries in our GDT...</span>
<a name="l00082"></a>00082  
<a name="l00083"></a>00083 <span class="keyword">struct </span><a class="code" href="structgdt__entry.html">gdt_entry</a> gdt[3];
<a name="l00084"></a>00084 <span class="keyword">struct </span><a class="code" href="structgdt__ptr.html">gdt_ptr</a> gp;
<a name="l00085"></a>00085  
<a name="l00086"></a>00086 <span class="keyword">extern</span> <span class="keywordtype">void</span> gdt_flush();
<a name="l00087"></a>00087 
<a name="l00088"></a>00088 <span class="keywordtype">void</span> <a class="code" href="dt_8c.html#a403dd84f86a16cf891e69242e4d725b">gdt_set_gate</a>(<span class="keywordtype">int</span>, <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>, <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>, <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>, <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>);
<a name="l00089"></a>00089 <span class="keywordtype">void</span> gdt_install();
<a name="l00090"></a>00090 
<a name="l00091"></a>00091 
<a name="l00092"></a>00092 
<a name="l00093"></a>00093 <span class="keywordtype">void</span> handler_reg(uint8_t, <span class="keywordtype">void</span> (*)(regs_t *r));
<a name="l00094"></a>00094 <span class="keywordtype">void</span> handler_unreg(uint8_t);
<a name="l00095"></a>00095 <span class="keywordtype">void</span> irq_remap(<span class="keywordtype">void</span>);
<a name="l00096"></a>00096 <span class="keywordtype">void</span> irq_install();
<a name="l00097"></a>00097 <span class="keywordtype">void</span> irq_handler(regs_t *);
<a name="l00098"></a>00098 
<a name="l00099"></a>00099 <span class="preprocessor">#endif</span>
</pre></div></div>
<hr size="1"><address style="text-align: right;"><small>Generated on Fri Feb 19 23:18:36 2010 for SpiderPig by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.8 </small></address>
</body>
</html>
